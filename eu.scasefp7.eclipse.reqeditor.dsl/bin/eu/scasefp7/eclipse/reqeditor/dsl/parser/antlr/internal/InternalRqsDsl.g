/*
 * generated by Xtext
 */
grammar InternalRqsDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package eu.scasefp7.eclipse.reqeditor.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package eu.scasefp7.eclipse.reqeditor.dsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import eu.scasefp7.eclipse.reqeditor.dsl.services.RqsDslGrammarAccess;

}

@parser::members {

 	private RqsDslGrammarAccess grammarAccess;
 	
    public InternalRqsDslParser(TokenStream input, RqsDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected RqsDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getModelAccess().getModelAction_0(),
            $current);
    }
)	otherlv_1='REQUIREMENTS' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModelAccess().getREQUIREMENTSKeyword_1());
    }
	otherlv_2='------------' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getModelAccess().getHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getRequirementsRequirementParserRuleCall_3_0()); 
	    }
		lv_requirements_3_0=ruleRequirement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"requirements",
        		lv_requirements_3_0, 
        		"Requirement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='------------' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getModelAccess().getHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusKeyword_4());
    }
	otherlv_5='ANNOTATIONS' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getModelAccess().getANNOTATIONSKeyword_5());
    }
	otherlv_6='------------' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getModelAccess().getHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusKeyword_6());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getAnnotationsTAnnotationParserRuleCall_7_0_0()); 
	    }
		lv_annotations_7_1=ruleTAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_7_1, 
        		"TAnnotation");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getAnnotationsRAnnotationParserRuleCall_7_0_1()); 
	    }
		lv_annotations_7_2=ruleRAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_7_2, 
        		"RAnnotation");
	        afterParserOrEnumRuleCall();
	    }

)

)
)*	otherlv_8='------------' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getModelAccess().getHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusKeyword_8());
    }
)
;





// Entry rule entryRuleRequirement
entryRuleRequirement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRequirementRule()); }
	 iv_ruleRequirement=ruleRequirement 
	 { $current=$iv_ruleRequirement.current; } 
	 EOF 
;

// Rule Requirement
ruleRequirement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_text_0_1=RULE_ID
		{
			newLeafNode(lv_text_0_1, grammarAccess.getRequirementAccess().getTextIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRequirementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"text",
        		lv_text_0_1, 
        		"ID");
	    }

    |		lv_text_0_2=	'.' 
    {
        newLeafNode(lv_text_0_2, grammarAccess.getRequirementAccess().getTextFullStopKeyword_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRequirementRule());
	        }
       		setWithLastConsumed($current, "text", lv_text_0_2, null);
	    }

)

)
)
;





// Entry rule entryRuleTAnnotation
entryRuleTAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTAnnotationRule()); }
	 iv_ruleTAnnotation=ruleTAnnotation 
	 { $current=$iv_ruleTAnnotation.current; } 
	 EOF 
;

// Rule TAnnotation
ruleTAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_num_0_0=RULE_INT
		{
			newLeafNode(lv_num_0_0, grammarAccess.getTAnnotationAccess().getNumINTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTAnnotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"num",
        		lv_num_0_0, 
        		"INT");
	    }

)
)	otherlv_1=':T' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTAnnotationAccess().getTKeyword_1());
    }
(
(
		lv_id_2_0=RULE_INT
		{
			newLeafNode(lv_id_2_0, grammarAccess.getTAnnotationAccess().getIdINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTAnnotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_2_0, 
        		"INT");
	    }

)
)(
(
(
		lv_type_3_1=	'Actor' 
    {
        newLeafNode(lv_type_3_1, grammarAccess.getTAnnotationAccess().getTypeActorKeyword_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTAnnotationRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_3_1, null);
	    }

    |		lv_type_3_2=	'Action' 
    {
        newLeafNode(lv_type_3_2, grammarAccess.getTAnnotationAccess().getTypeActionKeyword_3_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTAnnotationRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_3_2, null);
	    }

    |		lv_type_3_3=	'Object' 
    {
        newLeafNode(lv_type_3_3, grammarAccess.getTAnnotationAccess().getTypeObjectKeyword_3_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTAnnotationRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_3_3, null);
	    }

    |		lv_type_3_4=	'Property' 
    {
        newLeafNode(lv_type_3_4, grammarAccess.getTAnnotationAccess().getTypePropertyKeyword_3_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTAnnotationRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_3_4, null);
	    }

)

)
)(
(
		lv_a_4_0=RULE_INT
		{
			newLeafNode(lv_a_4_0, grammarAccess.getTAnnotationAccess().getAINTTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTAnnotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"a",
        		lv_a_4_0, 
        		"INT");
	    }

)
)(
(
		lv_b_5_0=RULE_INT
		{
			newLeafNode(lv_b_5_0, grammarAccess.getTAnnotationAccess().getBINTTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTAnnotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"b",
        		lv_b_5_0, 
        		"INT");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTAnnotationAccess().getTextUnquotedStringParserRuleCall_6_0()); 
	    }
		lv_text_6_0=ruleUnquotedString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTAnnotationRule());
	        }
       		add(
       			$current, 
       			"text",
        		lv_text_6_0, 
        		"UnquotedString");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleUnquotedString
entryRuleUnquotedString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnquotedStringRule()); } 
	 iv_ruleUnquotedString=ruleUnquotedString 
	 { $current=$iv_ruleUnquotedString.current.getText(); }  
	 EOF 
;

// Rule UnquotedString
ruleUnquotedString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getUnquotedStringAccess().getIDTerminalRuleCall()); 
    }
)+
    ;





// Entry rule entryRuleRAnnotation
entryRuleRAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRAnnotationRule()); }
	 iv_ruleRAnnotation=ruleRAnnotation 
	 { $current=$iv_ruleRAnnotation.current; } 
	 EOF 
;

// Rule RAnnotation
ruleRAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_num_0_0=RULE_INT
		{
			newLeafNode(lv_num_0_0, grammarAccess.getRAnnotationAccess().getNumINTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRAnnotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"num",
        		lv_num_0_0, 
        		"INT");
	    }

)
)	otherlv_1=':R' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRAnnotationAccess().getRKeyword_1());
    }
(
(
		lv_id_2_0=RULE_INT
		{
			newLeafNode(lv_id_2_0, grammarAccess.getRAnnotationAccess().getIdINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRAnnotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_2_0, 
        		"INT");
	    }

)
)(
(
(
		lv_type_3_1=	'IsActorOf' 
    {
        newLeafNode(lv_type_3_1, grammarAccess.getRAnnotationAccess().getTypeIsActorOfKeyword_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRAnnotationRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_3_1, null);
	    }

    |		lv_type_3_2=	'HasProperty' 
    {
        newLeafNode(lv_type_3_2, grammarAccess.getRAnnotationAccess().getTypeHasPropertyKeyword_3_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRAnnotationRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_3_2, null);
	    }

    |		lv_type_3_3=	'ActsOn' 
    {
        newLeafNode(lv_type_3_3, grammarAccess.getRAnnotationAccess().getTypeActsOnKeyword_3_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRAnnotationRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_3_3, null);
	    }

    |		lv_type_3_4=	'Property' 
    {
        newLeafNode(lv_type_3_4, grammarAccess.getRAnnotationAccess().getTypePropertyKeyword_3_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRAnnotationRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_3_4, null);
	    }

)

)
)(
(
		lv_aa_4_0=RULE_INT
		{
			newLeafNode(lv_aa_4_0, grammarAccess.getRAnnotationAccess().getAaINTTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRAnnotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"aa",
        		lv_aa_4_0, 
        		"INT");
	    }

)
)	otherlv_5=':T' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRAnnotationAccess().getTKeyword_5());
    }
(
(
		lv_ab_6_0=RULE_INT
		{
			newLeafNode(lv_ab_6_0, grammarAccess.getRAnnotationAccess().getAbINTTerminalRuleCall_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRAnnotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ab",
        		lv_ab_6_0, 
        		"INT");
	    }

)
)(
(
		lv_ba_7_0=RULE_INT
		{
			newLeafNode(lv_ba_7_0, grammarAccess.getRAnnotationAccess().getBaINTTerminalRuleCall_7_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRAnnotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ba",
        		lv_ba_7_0, 
        		"INT");
	    }

)
)	otherlv_8=':T' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getRAnnotationAccess().getTKeyword_8());
    }
(
(
		lv_bb_9_0=RULE_INT
		{
			newLeafNode(lv_bb_9_0, grammarAccess.getRAnnotationAccess().getBbINTTerminalRuleCall_9_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRAnnotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"bb",
        		lv_bb_9_0, 
        		"INT");
	    }

)
))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


