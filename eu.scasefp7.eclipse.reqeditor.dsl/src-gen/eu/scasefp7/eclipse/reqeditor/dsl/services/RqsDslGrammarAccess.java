/*
 * generated by Xtext
 */
package eu.scasefp7.eclipse.reqeditor.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class RqsDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cREQUIREMENTSKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRequirementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRequirementsRequirementParserRuleCall_3_0 = (RuleCall)cRequirementsAssignment_3.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cANNOTATIONSKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cAnnotationsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final Alternatives cAnnotationsAlternatives_7_0 = (Alternatives)cAnnotationsAssignment_7.eContents().get(0);
		private final RuleCall cAnnotationsTAnnotationParserRuleCall_7_0_0 = (RuleCall)cAnnotationsAlternatives_7_0.eContents().get(0);
		private final RuleCall cAnnotationsRAnnotationParserRuleCall_7_0_1 = (RuleCall)cAnnotationsAlternatives_7_0.eContents().get(1);
		private final Keyword cHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Model:
		//	{Model} "REQUIREMENTS" "------------" requirements+=Requirement* "------------" "ANNOTATIONS" "------------"
		//	annotations+=(TAnnotation | RAnnotation)* "------------";
		@Override public ParserRule getRule() { return rule; }

		//{Model} "REQUIREMENTS" "------------" requirements+=Requirement* "------------" "ANNOTATIONS" "------------"
		//annotations+=(TAnnotation | RAnnotation)* "------------"
		public Group getGroup() { return cGroup; }

		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }

		//"REQUIREMENTS"
		public Keyword getREQUIREMENTSKeyword_1() { return cREQUIREMENTSKeyword_1; }

		//"------------"
		public Keyword getHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusKeyword_2() { return cHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusKeyword_2; }

		//requirements+=Requirement*
		public Assignment getRequirementsAssignment_3() { return cRequirementsAssignment_3; }

		//Requirement
		public RuleCall getRequirementsRequirementParserRuleCall_3_0() { return cRequirementsRequirementParserRuleCall_3_0; }

		//"------------"
		public Keyword getHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusKeyword_4() { return cHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusKeyword_4; }

		//"ANNOTATIONS"
		public Keyword getANNOTATIONSKeyword_5() { return cANNOTATIONSKeyword_5; }

		//"------------"
		public Keyword getHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusKeyword_6() { return cHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusKeyword_6; }

		//annotations+=(TAnnotation | RAnnotation)*
		public Assignment getAnnotationsAssignment_7() { return cAnnotationsAssignment_7; }

		//TAnnotation | RAnnotation
		public Alternatives getAnnotationsAlternatives_7_0() { return cAnnotationsAlternatives_7_0; }

		//TAnnotation
		public RuleCall getAnnotationsTAnnotationParserRuleCall_7_0_0() { return cAnnotationsTAnnotationParserRuleCall_7_0_0; }

		//RAnnotation
		public RuleCall getAnnotationsRAnnotationParserRuleCall_7_0_1() { return cAnnotationsRAnnotationParserRuleCall_7_0_1; }

		//"------------"
		public Keyword getHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusKeyword_8() { return cHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusHyphenMinusKeyword_8; }
	}

	public class RequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Requirement");
		private final Assignment cTextAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTextAlternatives_0 = (Alternatives)cTextAssignment.eContents().get(0);
		private final RuleCall cTextIDTerminalRuleCall_0_0 = (RuleCall)cTextAlternatives_0.eContents().get(0);
		private final Keyword cTextFullStopKeyword_0_1 = (Keyword)cTextAlternatives_0.eContents().get(1);
		
		//Requirement:
		//	text=(ID | ".");
		@Override public ParserRule getRule() { return rule; }

		//text=(ID | ".")
		public Assignment getTextAssignment() { return cTextAssignment; }

		//ID | "."
		public Alternatives getTextAlternatives_0() { return cTextAlternatives_0; }

		//ID
		public RuleCall getTextIDTerminalRuleCall_0_0() { return cTextIDTerminalRuleCall_0_0; }

		//"."
		public Keyword getTextFullStopKeyword_0_1() { return cTextFullStopKeyword_0_1; }
	}

	public class TAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNumAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNumINTTerminalRuleCall_0_0 = (RuleCall)cNumAssignment_0.eContents().get(0);
		private final Keyword cTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdINTTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cTypeAlternatives_3_0 = (Alternatives)cTypeAssignment_3.eContents().get(0);
		private final Keyword cTypeActorKeyword_3_0_0 = (Keyword)cTypeAlternatives_3_0.eContents().get(0);
		private final Keyword cTypeActionKeyword_3_0_1 = (Keyword)cTypeAlternatives_3_0.eContents().get(1);
		private final Keyword cTypeObjectKeyword_3_0_2 = (Keyword)cTypeAlternatives_3_0.eContents().get(2);
		private final Keyword cTypePropertyKeyword_3_0_3 = (Keyword)cTypeAlternatives_3_0.eContents().get(3);
		private final Assignment cAAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAINTTerminalRuleCall_4_0 = (RuleCall)cAAssignment_4.eContents().get(0);
		private final Assignment cBAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBINTTerminalRuleCall_5_0 = (RuleCall)cBAssignment_5.eContents().get(0);
		private final Assignment cTextAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTextUnquotedStringParserRuleCall_6_0 = (RuleCall)cTextAssignment_6.eContents().get(0);
		
		//TAnnotation:
		//	num=INT ":T" id=INT type=("Actor" | "Action" | "Object" | "Property") a=INT b=INT text+=UnquotedString;
		@Override public ParserRule getRule() { return rule; }

		//num=INT ":T" id=INT type=("Actor" | "Action" | "Object" | "Property") a=INT b=INT text+=UnquotedString
		public Group getGroup() { return cGroup; }

		//num=INT
		public Assignment getNumAssignment_0() { return cNumAssignment_0; }

		//INT
		public RuleCall getNumINTTerminalRuleCall_0_0() { return cNumINTTerminalRuleCall_0_0; }

		//":T"
		public Keyword getTKeyword_1() { return cTKeyword_1; }

		//id=INT
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }

		//INT
		public RuleCall getIdINTTerminalRuleCall_2_0() { return cIdINTTerminalRuleCall_2_0; }

		//type=("Actor" | "Action" | "Object" | "Property")
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//"Actor" | "Action" | "Object" | "Property"
		public Alternatives getTypeAlternatives_3_0() { return cTypeAlternatives_3_0; }

		//"Actor"
		public Keyword getTypeActorKeyword_3_0_0() { return cTypeActorKeyword_3_0_0; }

		//"Action"
		public Keyword getTypeActionKeyword_3_0_1() { return cTypeActionKeyword_3_0_1; }

		//"Object"
		public Keyword getTypeObjectKeyword_3_0_2() { return cTypeObjectKeyword_3_0_2; }

		//"Property"
		public Keyword getTypePropertyKeyword_3_0_3() { return cTypePropertyKeyword_3_0_3; }

		//a=INT
		public Assignment getAAssignment_4() { return cAAssignment_4; }

		//INT
		public RuleCall getAINTTerminalRuleCall_4_0() { return cAINTTerminalRuleCall_4_0; }

		//b=INT
		public Assignment getBAssignment_5() { return cBAssignment_5; }

		//INT
		public RuleCall getBINTTerminalRuleCall_5_0() { return cBINTTerminalRuleCall_5_0; }

		//text+=UnquotedString
		public Assignment getTextAssignment_6() { return cTextAssignment_6; }

		//UnquotedString
		public RuleCall getTextUnquotedStringParserRuleCall_6_0() { return cTextUnquotedStringParserRuleCall_6_0; }
	}

	public class UnquotedStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnquotedString");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//UnquotedString:
		//	ID+;
		@Override public ParserRule getRule() { return rule; }

		//ID+
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class RAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNumAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNumINTTerminalRuleCall_0_0 = (RuleCall)cNumAssignment_0.eContents().get(0);
		private final Keyword cRKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdINTTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cTypeAlternatives_3_0 = (Alternatives)cTypeAssignment_3.eContents().get(0);
		private final Keyword cTypeIsActorOfKeyword_3_0_0 = (Keyword)cTypeAlternatives_3_0.eContents().get(0);
		private final Keyword cTypeHasPropertyKeyword_3_0_1 = (Keyword)cTypeAlternatives_3_0.eContents().get(1);
		private final Keyword cTypeActsOnKeyword_3_0_2 = (Keyword)cTypeAlternatives_3_0.eContents().get(2);
		private final Keyword cTypePropertyKeyword_3_0_3 = (Keyword)cTypeAlternatives_3_0.eContents().get(3);
		private final Assignment cAaAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAaINTTerminalRuleCall_4_0 = (RuleCall)cAaAssignment_4.eContents().get(0);
		private final Keyword cTKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAbAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAbINTTerminalRuleCall_6_0 = (RuleCall)cAbAssignment_6.eContents().get(0);
		private final Assignment cBaAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBaINTTerminalRuleCall_7_0 = (RuleCall)cBaAssignment_7.eContents().get(0);
		private final Keyword cTKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cBbAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cBbINTTerminalRuleCall_9_0 = (RuleCall)cBbAssignment_9.eContents().get(0);
		
		//RAnnotation:
		//	num=INT ":R" id=INT type=("IsActorOf" | "HasProperty" | "ActsOn" | "Property") aa=INT ":T" ab=INT ba=INT ":T" bb=INT;
		@Override public ParserRule getRule() { return rule; }

		//num=INT ":R" id=INT type=("IsActorOf" | "HasProperty" | "ActsOn" | "Property") aa=INT ":T" ab=INT ba=INT ":T" bb=INT
		public Group getGroup() { return cGroup; }

		//num=INT
		public Assignment getNumAssignment_0() { return cNumAssignment_0; }

		//INT
		public RuleCall getNumINTTerminalRuleCall_0_0() { return cNumINTTerminalRuleCall_0_0; }

		//":R"
		public Keyword getRKeyword_1() { return cRKeyword_1; }

		//id=INT
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }

		//INT
		public RuleCall getIdINTTerminalRuleCall_2_0() { return cIdINTTerminalRuleCall_2_0; }

		//type=("IsActorOf" | "HasProperty" | "ActsOn" | "Property")
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//"IsActorOf" | "HasProperty" | "ActsOn" | "Property"
		public Alternatives getTypeAlternatives_3_0() { return cTypeAlternatives_3_0; }

		//"IsActorOf"
		public Keyword getTypeIsActorOfKeyword_3_0_0() { return cTypeIsActorOfKeyword_3_0_0; }

		//"HasProperty"
		public Keyword getTypeHasPropertyKeyword_3_0_1() { return cTypeHasPropertyKeyword_3_0_1; }

		//"ActsOn"
		public Keyword getTypeActsOnKeyword_3_0_2() { return cTypeActsOnKeyword_3_0_2; }

		//"Property"
		public Keyword getTypePropertyKeyword_3_0_3() { return cTypePropertyKeyword_3_0_3; }

		//aa=INT
		public Assignment getAaAssignment_4() { return cAaAssignment_4; }

		//INT
		public RuleCall getAaINTTerminalRuleCall_4_0() { return cAaINTTerminalRuleCall_4_0; }

		//":T"
		public Keyword getTKeyword_5() { return cTKeyword_5; }

		//ab=INT
		public Assignment getAbAssignment_6() { return cAbAssignment_6; }

		//INT
		public RuleCall getAbINTTerminalRuleCall_6_0() { return cAbINTTerminalRuleCall_6_0; }

		//ba=INT
		public Assignment getBaAssignment_7() { return cBaAssignment_7; }

		//INT
		public RuleCall getBaINTTerminalRuleCall_7_0() { return cBaINTTerminalRuleCall_7_0; }

		//":T"
		public Keyword getTKeyword_8() { return cTKeyword_8; }

		//bb=INT
		public Assignment getBbAssignment_9() { return cBbAssignment_9; }

		//INT
		public RuleCall getBbINTTerminalRuleCall_9_0() { return cBbINTTerminalRuleCall_9_0; }
	}
	
	
	private final ModelElements pModel;
	private final RequirementElements pRequirement;
	private final TAnnotationElements pTAnnotation;
	private final UnquotedStringElements pUnquotedString;
	private final RAnnotationElements pRAnnotation;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RqsDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pRequirement = new RequirementElements();
		this.pTAnnotation = new TAnnotationElements();
		this.pUnquotedString = new UnquotedStringElements();
		this.pRAnnotation = new RAnnotationElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("eu.scasefp7.eclipse.reqeditor.dsl.RqsDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	{Model} "REQUIREMENTS" "------------" requirements+=Requirement* "------------" "ANNOTATIONS" "------------"
	//	annotations+=(TAnnotation | RAnnotation)* "------------";
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Requirement:
	//	text=(ID | ".");
	public RequirementElements getRequirementAccess() {
		return pRequirement;
	}
	
	public ParserRule getRequirementRule() {
		return getRequirementAccess().getRule();
	}

	//TAnnotation:
	//	num=INT ":T" id=INT type=("Actor" | "Action" | "Object" | "Property") a=INT b=INT text+=UnquotedString;
	public TAnnotationElements getTAnnotationAccess() {
		return pTAnnotation;
	}
	
	public ParserRule getTAnnotationRule() {
		return getTAnnotationAccess().getRule();
	}

	//UnquotedString:
	//	ID+;
	public UnquotedStringElements getUnquotedStringAccess() {
		return pUnquotedString;
	}
	
	public ParserRule getUnquotedStringRule() {
		return getUnquotedStringAccess().getRule();
	}

	//RAnnotation:
	//	num=INT ":R" id=INT type=("IsActorOf" | "HasProperty" | "ActsOn" | "Property") aa=INT ":T" ab=INT ba=INT ":T" bb=INT;
	public RAnnotationElements getRAnnotationAccess() {
		return pRAnnotation;
	}
	
	public ParserRule getRAnnotationRule() {
		return getRAnnotationAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
