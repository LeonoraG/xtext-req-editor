/*
 * generated by Xtext
 */
package eu.scasefp7.eclipse.reqeditor.dsl.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import eu.scasefp7.eclipse.reqeditor.dsl.rqsDsl.Model;
import eu.scasefp7.eclipse.reqeditor.dsl.rqsDsl.RAnnotation;
import eu.scasefp7.eclipse.reqeditor.dsl.rqsDsl.Requirement;
import eu.scasefp7.eclipse.reqeditor.dsl.rqsDsl.RqsDslPackage;
import eu.scasefp7.eclipse.reqeditor.dsl.rqsDsl.TAnnotation;
import eu.scasefp7.eclipse.reqeditor.dsl.services.RqsDslGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;

@SuppressWarnings("all")
public class RqsDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RqsDslGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == RqsDslPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case RqsDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case RqsDslPackage.RANNOTATION:
				sequence_RAnnotation(context, (RAnnotation) semanticObject); 
				return; 
			case RqsDslPackage.REQUIREMENT:
				sequence_Requirement(context, (Requirement) semanticObject); 
				return; 
			case RqsDslPackage.TANNOTATION:
				sequence_TAnnotation(context, (TAnnotation) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (requirements+=Requirement* (annotations+=TAnnotation | annotations+=RAnnotation)*)
	 */
	protected void sequence_Model(EObject context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         num=INT 
	 *         id=INT 
	 *         (type='IsActorOf' | type='HasProperty' | type='ActsOn' | type='Property') 
	 *         aa=INT 
	 *         ab=INT 
	 *         ba=INT 
	 *         bb=INT
	 *     )
	 */
	protected void sequence_RAnnotation(EObject context, RAnnotation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (text=ID | text='.')
	 */
	protected void sequence_Requirement(EObject context, Requirement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         num=INT 
	 *         id=INT 
	 *         (type='Actor' | type='Action' | type='Object' | type='Property') 
	 *         a=INT 
	 *         b=INT 
	 *         text+=UnquotedString
	 *     )
	 */
	protected void sequence_TAnnotation(EObject context, TAnnotation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
