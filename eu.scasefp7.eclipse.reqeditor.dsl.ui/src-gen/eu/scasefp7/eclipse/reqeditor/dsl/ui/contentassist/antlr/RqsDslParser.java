/*
 * generated by Xtext
 */
package eu.scasefp7.eclipse.reqeditor.dsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import eu.scasefp7.eclipse.reqeditor.dsl.services.RqsDslGrammarAccess;

public class RqsDslParser extends AbstractContentAssistParser {
	
	@Inject
	private RqsDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected eu.scasefp7.eclipse.reqeditor.dsl.ui.contentassist.antlr.internal.InternalRqsDslParser createParser() {
		eu.scasefp7.eclipse.reqeditor.dsl.ui.contentassist.antlr.internal.InternalRqsDslParser result = new eu.scasefp7.eclipse.reqeditor.dsl.ui.contentassist.antlr.internal.InternalRqsDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelAccess().getAnnotationsAlternatives_7_0(), "rule__Model__AnnotationsAlternatives_7_0");
					put(grammarAccess.getRequirementAccess().getTextAlternatives_0(), "rule__Requirement__TextAlternatives_0");
					put(grammarAccess.getTAnnotationAccess().getTypeAlternatives_3_0(), "rule__TAnnotation__TypeAlternatives_3_0");
					put(grammarAccess.getRAnnotationAccess().getTypeAlternatives_3_0(), "rule__RAnnotation__TypeAlternatives_3_0");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getTAnnotationAccess().getGroup(), "rule__TAnnotation__Group__0");
					put(grammarAccess.getRAnnotationAccess().getGroup(), "rule__RAnnotation__Group__0");
					put(grammarAccess.getModelAccess().getRequirementsAssignment_3(), "rule__Model__RequirementsAssignment_3");
					put(grammarAccess.getModelAccess().getAnnotationsAssignment_7(), "rule__Model__AnnotationsAssignment_7");
					put(grammarAccess.getRequirementAccess().getTextAssignment(), "rule__Requirement__TextAssignment");
					put(grammarAccess.getTAnnotationAccess().getNumAssignment_0(), "rule__TAnnotation__NumAssignment_0");
					put(grammarAccess.getTAnnotationAccess().getIdAssignment_2(), "rule__TAnnotation__IdAssignment_2");
					put(grammarAccess.getTAnnotationAccess().getTypeAssignment_3(), "rule__TAnnotation__TypeAssignment_3");
					put(grammarAccess.getTAnnotationAccess().getAAssignment_4(), "rule__TAnnotation__AAssignment_4");
					put(grammarAccess.getTAnnotationAccess().getBAssignment_5(), "rule__TAnnotation__BAssignment_5");
					put(grammarAccess.getTAnnotationAccess().getTextAssignment_6(), "rule__TAnnotation__TextAssignment_6");
					put(grammarAccess.getRAnnotationAccess().getNumAssignment_0(), "rule__RAnnotation__NumAssignment_0");
					put(grammarAccess.getRAnnotationAccess().getIdAssignment_2(), "rule__RAnnotation__IdAssignment_2");
					put(grammarAccess.getRAnnotationAccess().getTypeAssignment_3(), "rule__RAnnotation__TypeAssignment_3");
					put(grammarAccess.getRAnnotationAccess().getAaAssignment_4(), "rule__RAnnotation__AaAssignment_4");
					put(grammarAccess.getRAnnotationAccess().getAbAssignment_6(), "rule__RAnnotation__AbAssignment_6");
					put(grammarAccess.getRAnnotationAccess().getBaAssignment_7(), "rule__RAnnotation__BaAssignment_7");
					put(grammarAccess.getRAnnotationAccess().getBbAssignment_9(), "rule__RAnnotation__BbAssignment_9");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			eu.scasefp7.eclipse.reqeditor.dsl.ui.contentassist.antlr.internal.InternalRqsDslParser typedParser = (eu.scasefp7.eclipse.reqeditor.dsl.ui.contentassist.antlr.internal.InternalRqsDslParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public RqsDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(RqsDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
